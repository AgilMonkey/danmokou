
## Please make sure you are using a syntax highlighter, otherwise this tutorial will be a nightmare to read.
## The repository contains a notepadPlusPlus.xml file which can be used as a Notepad++ language definition. To update the language definition, copy it directly into `AppData/Roaming/Notepad++/userDefineLangs`. Then you can select "BDSL" from the "Language" option in the header.

## This tutorial will introduce you to the structure of scripts. 
## A comment requires ONE hashtag and can be placed on its own line or at the end of a line. The syntax highlighter will only mark comments with TWO hashtags.

## There are three types of scripts: pattern scripts, dialogue scripts, and partial scripts. The first tutorials will cover pattern scripts.
## Pattern scripts govern the behavior of complex entities with multiple phases, such as bosses. 
## The first line of a pattern script is always "pattern", followed by an array of pattern properties.
## Normally we put information relating to boss configuration in here, but it is safe to leave it empty.
pattern({ })
## A pattern is broken up into any number of PHASEs.
## By convention, the first phase (#0) is used for setup, and has a "shift-phase-to" command used for going to the phase we want to test.
phase(0)
	## The sections of a phase are executed in sequence.
	## "Action" is a group of simple commands that are executed in parallel. (Use "saction" to run simple commands in sequence.)
	## They can be either "blocking" or "nonblocking". If they are nonblocking, then the next phase section will start immediately.
	## The number after "block" is a delay timer.
	action(block, 0)
		shift-phase-to(1)
		
## This is phase #1. 
## Phases can have properties (see Danmaku/StateMachines/SMProperties.cs), formatted as follows.

## A phase can have a type of either "nonspell", "spell", "timeout", "final", "dialogue", "stage", "stagemidboss", "stageendboss", or null. 
## If you don't have a type property, then the type will be null.
## For now, we will only use nonspell and spell, and we'll discuss the rest in a later tutorial. 
<!> type(non, `Moving Left and Right`)
## This property marks the amount of HP the executor has during the phase. The player deals ~1000 damage per second. 
<!> hp(4000)
## The root command sets the starting position of the executor when this phase is run. (0,0) is the center of the screen. The screen is 16x9 units.
## By default, the executor will take 2 seconds to move to this position, and then the phase will start.
<!> root(0, 1)
## The number after "phase" is the timeout. If it is zero, then there is no timeout.
phase(0)
	action(block, 0)
		## Don't worry about how this works for now, just note that it moves the executor left and right.
		move(_, nroffset(px(sine(4, 3, t))))
		
	## Danmokou allows you to instantly reload edited scripts by pressing `R` in the game view. 
	## Set the shift-phase-to to `2` and press `R` in the game view to reload the script and go to the next phase.
	## Alternatively, if you make the executor run out of HP, it will automatically go to the next phase.
		
## This is phase #2. 
<!> type(spell, `Moving Up and Down`)
<!> hp(5000)
## Protip: if you `TeleportAtPhaseStart` to true in Danmaku/Services/SaveData.cs, the executor will teleport to the position instantaneously instead of taking 2 seconds to move there. This is useful for testing.
<!> root(0, 0)
phase(20)
	action(block, 0)
		## Don't worry about how this works for now, just note that it moves the executor up and down, but for only 4 seconds.
		move(4, nroffset(py(sine(4, 3, t))))
	## After the boss is done moving up and down, it delays for one second and then starts moving left and right for 4 seconds.
	action(block, 1)
		move(4, nroffset(px(sine(4, 3, t))))
		



