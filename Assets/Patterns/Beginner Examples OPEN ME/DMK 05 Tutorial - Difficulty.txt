pattern { }
phase 0
	action block 0
		shift-phase-to 1
		
## Note: To change the difficulty when reloading a script, use the keys T,Y,U,I,O,P,[,5. The R key will reload the current difficulty, but these will change the difficulty before reloading. 
<!> root 0 1
phase 0
	action block 0
## The default difficulties are Easier, Easy, Normal, Hard, Lunatic, Ultra, Abex, and Assembly. You can remove or add them to the DifficultySet enum as you like. 
## Each difficulty is assigned a counter and a value. The counters go from 0 (Easier) to 4 (Lunatic) to 7 (Assembly). The values are based on powers of two and go from 0.76 (Easier) to 2.3 (Lunatic) to 4.9 (Assembly). These realizations are in Core/Enums.cs.
## DL() retrieves the current difficulty relative to Lunatic as a multiplicative factor. On Easier, it is ~0.3. On Lunatic, it is 1. On Assembly, it is ~2.1. 
## Therefore, this function fires 30 bullets on Lunatic, more on higher difficulties, and fewer on lesser difficulties. 
## There are similar functions DN and DH, or you can add ones for extra difficulties as necessary.
!!{ crpt * dl 30
		sync arrow-red/w <> gsr2c $crpt {
		} s tprot cx 2
## Scaling via DL is automatic. The factors are hardcoded into the engine. You can use less or more of the factor by eg. raising it to a power. In general, you should only use DL/DH/DN to multiply or divide numbers.
## However, sometimes you want an additive factor instead of a multiplicative one. In that case, use DC(), which retrieves the difficulty counter. On Lunatic, this summons 10 lasers (dc = 4).
		sync gdlaser-blue/b <> gsr2c + 6 dc {
		} laser null 1 2 {
			dsfx
		}
## There are some convenience methods for grouping difficulties. For example, d3d2 returns -2 for Easier/Easy/Normal, 0 for Hard/Lunatic, and 2 for higher difficulties. This is useful for aimed sectors.
		async triangle-green/w <> gcr2 8 10 <> {
			target a Lplayer
		} gsr2 + 5 d3d2 <> {
			spread <80>
			center
		} s tprot cx 2

		
